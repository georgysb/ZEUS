
-------------------------------------------------------------------------------------------------// page 0
0x00, 0xC3, 0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 	// RST 0x00 jump PRIMER
0x00, 0xC3, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 	// RST 0x08
0x00, 0xC3, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 	// RST 0x10
0x00, 0xC3, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 	// RST 0x18
0x00, 0xC3, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 	// RST 0x20
0x00, 0xC3, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 	// RST 0x28
0x00, 0xC3, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 	// RST 0x30
0x00, 0xC3, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 	// RST 0x38
0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, // uppercase hex table $8040
0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66,	// lowercase hex table $8050
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 							// reserved 0x60-0x65
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xED, 0x45, 	// NMI primer 0x66-0x6F
0x63, 0x6C, 0x72,             	// 0x8070 "clr"
0x64, 0x75, 0x6D, 0x70, 0x20, 	// 0x8073 "dump "
0x73, 0x65, 0x6E, 0x64, 0x20, 	// 0x8078 "send "
0x6C, 0x6F, 0x61, 0x64, 0x20, 	// 0x807D "load "
0x6D, 0x6F, 0x76, 0x65, 0x20, 	// 0x8082 "move "
0x6A, 0x75, 0x6D, 0x70, 0x20, 	// 0x8087 "jump "
0x65, 0x78, 0x65, 0x63, 0x20, 	// 0x808C "exe—Å "
0x73, 0x79, 0x73, 0x6C, 0x20, 	// 0x8091 "sysl "
0x73, 0x79, 0x73, 0x68, 0x20, 	// 0x8096 "sysh "
0x6F, 0x75, 0x74, 0x20,       	// 0x809B "out "
0x63, 0x72, 0x63, 0x37, 0x20, 	// 0x809F "crc7 "
0x73, 0x64, 0x69, 0x20,       	// 0x80A4 "sdi "
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ BIOS routines
------------------------------------------------// SIO void handler
EI		1	0xFB, 		
RETI	2	0xED, 0x4D, 
------------------------------------------------// pause counter (input B)*4103 ticks  (+0x0009)
LD C, 0xFF	(7)	0x0E, 0xFF, 
DEC C		(4)	0x0D, 
JR NZ, -3	(12) 0x20, 0xFD, 
DEC B		(4)	0x05, 
JR NZ, -8	(12) 0x20, 0xF8, 
RET			1	0xC9, 
------------------------------------------------// TFT_char_cell_set (input D, E) routine (+0x0059)
PUSH HL			0xE5, 
PUSH BC			0xC5, 
PUSH DE			0xD5, 

LD L, D			0x6A, 
LD H, 0x00		0x26, 0x00, 
LD C, 0x03		0x0E, 0x03, 

SCF			1	0x37, //(9)
CCF			1	0x3F, 
RL L		2	0xCB, 0x15, 
RL H		2	0xCB, 0x14, 
DEC C		1	0x0D, 
JR NZ, -9	2	0x20, 0xF7, 

LD D, 0x2A			0x16, 0x2A, 
CALL tft_wr_com		0xCD, 0x0C, 0x93, 	//Column address set com
LD D, H				0x54, 
CALL tft_wr_data	0xCD, 0x??, 0x??, 	//start MSbyte **
LD D, L				0x55, 
CALL tft_wr_data	0xCD, 0x??, 0x??, 	//start LSbyte **

LD D, 0x00			0x16, 0x00, 
LD E, 0x07			0x1E, 0x07, 
ADD HL, DE			0x19, 
LD D, H				0x54, 
CALL tft_wr_data	0xCD, 0x??, 0x??, 	//stop MSbyte **
LD D, L				0x55, 
CALL tft_wr_data	0xCD, 0x??, 0x??, 	//stop LSbyte **
POP DE				0xD1, 
PUSH DE				0xD5, 

LD L, E		1	0x6B, 
LD H, 0x00	2	0x26, 0x00,
LD C, 0x04	2	0x0E, 0x04, 

SCF			1	0x37, //(9)
CCF			1	0x3F, 
RL L		2	0xCB, 0x15, 
RL H		2	0xCB, 0x14, 
DEC C		1	0x0D, 
JR NZ, -9	2	0x20, 0xF7,

LD D, 0x2B			0x16, 0x2B, 
CALL tft_wr_com		0xCD, 0x??, 0x??, 	//Page address set com
LD D, H				0x54, 
CALL tft_wr_data	0xCD, 0x??, 0x??, 	//start MSbyte **
LD D, L				0x55, 
CALL tft_wr_data	0xCD, 0x??, 0x??, 	//start LSbyte **
LD D, 0x00			0x16, 0x00, 
LD E, 0x0F			0x1E, 0x0F, 
ADD HL, DE			0x19, 
LD D, H				0x54, 
CALL tft_wr_data	0xCD, 0x??, 0x??, 	//stop MSbyte **
LD D, L				0x55, 
CALL tft_wr_data	0xCD, 0x??, 0x??, 	//stop LSbyte **

POP DE		1	0xD1, 
POP BC		1	0xC1, 
POP HL		1	0xE1, 
RET		1	0xC9, 
---------------------------------------------------//TFT_char_fill (input A) routine (+0x0050)
PUSH HL		1	0xE5, 
PUSH BC		1	0xC5, 
PUSH DE		1	0xD5, 

LD L, A			1	0x6F, 
LD H, 0x00		2	0x26, 0x00, 
LD C, 0x04		2	0x0E, 0x04, 

SCF			1	0x37, //(9)
CCF			1	0x3F, 
RL L			2	0xCB, 0x15, 
RL H			2	0xCB, 0x14, 
DEC C			1	0x0D, 
JR NZ, -9		2	0x20, 0xF7, 

LD D, 0x2C		2 	0x16, 0x2C, 
CALL tft_wr_com		3	0xCD, 0x??, 0x??, 
LD BC, ($FE00)		4	0xED, 0x4B, 0x00, 0xFE, 	//font table address read
ADD HL, BC		1	0x09, 
LD B, 0x10		2 	0x06, 0x10, 

LD C, 0x08		2	0x0E, 0x08, //(4)
LD E, 0x80		2	0x1E, 0x80, 

LD A, E			1	0x7B, //(6)
RRC E			2	0xCB, 0x0B, 
AND A, (HL)		1	0xA6, 
JP NZ, 16		2	0x20, 0x10, 

LD A ($FE0A)		3	0x3A, 0x0A, 0xFE, //(16)
LD D, A			1	0x57, 
CALL tft_wr_data	3	0xCD, 0x??, 0x??, //rg
LD A ($FE0B)		3	0x3A, 0x0B, 0xFE, 
LD D, A			1	0x57, 
CALL tft_wr_data	3	0xCD, 0x??, 0x??, //gb
JP, 14			2	0x18, 0x0E, 

LD A ($FE08)		3	0x3A, 0x08, 0xFE, //(14)
LD D, A			1	0x57, 
CALL tft_wr_data	3	0xCD, 0x??, 0x??, //rg
LD A ($FE09)		3	0x3A, 0x09, 0xFE, 
LD D, A			1	0x57, 
CALL tft_wr_data	3	0xCD, 0x??, 0x??, //gb

DEC C			1	0x0D, //(7)
JR NZ, -39		2	0x20, 0xD9, 
INC HL			1	0X23, 
DEC B			1	0x05, 
JR NZ, -47		2	0x20, 0xD1, 

POP DE			1	0xD1, 
POP BC			1	0xC1, 
POP HL			1	0xE1, 
RET			1	0xC9, 
----------------------------------------------------------------// TFT_char_erase (+0x0027)
LD A, ($FE04)		3	0x3A, 0x04, 0xFE, 		//keyb buff pointer low byte read
CP 0			2	0xFE, 0x00, 
RET Z 			1	0xC8, 
DEC A			1	0x3D, 
LD ($FE04), A		3	0x32, 0x04, 0xFE, 		//keyb buff pointer low byte write

LD DE, ($FE0C)		4	0xED, 0x5B, 0x0C, 0xFE, 	//char position read
LD A, 0			2	0x3E, 0x00, 
CP D			1	0xBA, 
JR NZ, 6		2	0x20, 0x06, 
CP E			1	0xBB, 
JR Z, 7			2	0x28, 0x07, 
DEC E			1	0x1D, 
LD D, 40		2	0x16, 0x28, 
DEC D			1	0x15, 
CALL tft_ch_cell_set	3	0xCD, 0x??, 0x??, 
LD A, 0x20		2	0x3E, 0x20, 
CALL tft_ch_fill	3	0xCD, 0x??, 0x??, 
LD ($FE0C), DE		4	0xED, 0x53, 0x0C, 0xFE, 	//char position write
RET						1	0xC9, 
--------------------------------------------------------------// SIO UART(0x00) subroutine(+0x000D)
:portA_data_read(13)
IN A, (00h)		2	0xDB, 0x00, 
LD HL, ($FE06)		3	0x2A, 0x06, 0xFE, 		//UART buff pointer read
LD (HL), A		1	0x77, 
INC HL			1	0x23, 
LD ($FE06), HL		3	0x22, 0x06, 0xFE, 		//UART buff pointer write
EI			1	0xFB, 
RETI			2	0xED, 0x4D, 
---------------------------------------------------------------// UART error code print (+0x002D)
PUSH DE			1	0xD5, 

LD DE, 0x0C, 0x23	3	0x11, 0x0C, 0x23, // set print start position(33)
CALL tft_ch_cell_set	3	0xCD, 0x14, 0xFC, 
LD A, "U"		2	0x3E, 0x55, 
CALL tft_ch_fill	3	0xCD, 0x18, 0xFC, 
INC D			1	0x14, 
CALL tft_ch_cell_set	3	0xCD, 0x14, 0xFC, 
LD A, "E"		2	0x3E, 0x45, 
CALL tft_ch_fill	3	0xCD, 0x18, 0xFC, 
INC D			1	0x14, 
CALL tft_ch_cell_set	3	0xCD, 0x14, 0xFC, 
LD A, " "		2	0x3E, 0x20, 
CALL tft_ch_fill	3	0xCD, 0x18, 0xFC, 
INC D			1	0x14, 
CALL tft_ch_cell_set	3	0xCD, 0x14, 0xFC, 

LD A, 01h		2	0x3E, 0x01, 		//WR1 (SIO port A) (9)
OUT (02h), A		2	0xD3, 0x02, 
IN A, (02h)		2	0xDB, 0x02, 
CALL hex_print		3	0xCD, 0x34, 0xFC, 

POP DE			1	0xD1, 
RET			1	0xC9, 
--------------------------------------------------------------// SIO port PS/2(0x00) subroutine(+0x009D)
:portB_data_read(8)
PUSH BC			1	0xC5, 
IN A, (01h)		2	0xDB, 0x01, 		//read current scan code
LD C, A			1	0x4F, 
LD HL, $FE80		3	0x21, 0x80, 0xFE, 	//load previous scan code
LD B, (HL)		1	0x46, 

//check E0 block(8)
LD A, 0xE0		2	0x3E, 0xE0, 
CP B			1	0xB8, 			//check previous scan code
JR Z, jp4		2	0x28, 0x09, 
CP C			1	0xB9, 			//check current scan code
JR Z, jp4		2	0x28, 0x06, 

//check F0 block(8)
LD A, 0xF0		2	0x3E, 0xF0, 
CP B			1	0xB8, 			//check previous scan code
JR Z, jp3		2	0x28, 0x49, 
CP C			1	0xB9, 			//check current scan code
JR Z, jp4		2	0x28, 0x7D, 

//good for print(68)
LD HL, $FE80		3	0x21, 0x80, 0xFE, 		// prevC <-- C(4)
LD (HL) C		1	0x71, 

LD HL, ($FE02)		3	0x2A, 0x02, 0xFE,  		// fetch ASCII C(7)
LD B, 0x00		2	0x06, 0x00, 
ADD HL, BC		1	0x09, 
LD A, (HL)		1	0x7E, 

CP 0x20			2	0xFE, 0x20, 		// check ASCII range(8)
JR C, jp3		2	0x38, 0x37, 
CP 0x7F			2	0xFE, 0x7F, 
JR NC, jp3		2	0x30, 0x33, 

LD D, A			1	0x57, 
LD HL, ($FE04)		3	0x2A, 0x04, 0xFE, 		//keyb buff pointer read(17)
LD A, 0xFF		2	0x3E, 0xFF, 
CP L			1	0xBD, 
LD A, D			1	0x7A, 
JR Z, jp3		2	0x28, 0x29, 
INC L			1	0x2C, 
LD ($FE04), HL		3	0x22, 0x04, 0xFE, 		//keyb buff pointer write
LD (HL), A		1	0x77, 
OUT(h00), A		2	0xD3, 0x00, 		//output UART(h00)

LD DE, ($FE0C)		4	0xED, 0x5B, 0x0C, 0xFE, 	//char position read(12)
LD B, A			1	0x47, 
CALL tft_ch_cell_set	3	0xCD, 0x??, 0x??, 
LD A, B			1	0x78, 
CALL tft_ch_fill	3	0xCD, 0x??, 0x??, 

LD A, 39		2	0x3E, 0x27, 		// next char coords(22)
CP D			1	0xBA, 
JR NZ, 8		2	0x20, 0x08, 
LD A, 15		2	0x3E, 0x0F, 
CP E			1	0xBB, 
JR Z, 8			2	0x28, 0x08, 
INC E			1	0x1C, 
LD D, $FF		2	0x16, 0xFF, 
INC D			1	0x14, 
LD ($FE0C), DE	4	0xED, 0x53, 0x0C, 0xFE, 	//char position write
POP BC			1	0xC1, 
EI				1	0xFB, 
RETI			2	0xED, 0x4D, 

jp3: //not good for print(55)
LD A, 0x12		2	0x3E, 0x12, 		//check Shift pressed(19)
CP C			1	0xB9, 
JR NZ, next		2	0x20, 0x0E, 
LD A, 0xF0		2	0x3E, 0xF0, 
CP B			1	0xB8, 
LD HL, $FE02	3	0x21, 0x02, 0xFE, 		//keyb scan table pointer
LD (HL), $00	2	0x36, 0x00,  		//Shift OFF
JR Z, jp4		2	0x28, 0x28, 
LD (HL), $80	2	0x36, 0x80,  		//Shift ON
JR  jp4			2	0x18, 0x24, 

LD A, 0x66		2	0x3E, 0x66, 		//check Backspace pressed(19)
CP C			1	0xB9, 
JR NZ, next		2	0x20, 0x0E, 
LD A, 0xF0		2	0x3E, 0xF0, 
CP B			1	0xB8, 
JR Z, jp4		2	0x28, 0x1A, 
LD A, 0x08		2	0x3E, 0x08, 
OUT(0x00), A	2	0xD3, 0x00, 
CALL tft_erase	3	0xCD, 0x??, 0x??, 
JR Z, jp4		2	0x28, 0x11, 

LD A, 0x5A		2	0x3E, 0x5A, 		//check Enter released(17)
CP C			1	0xB9, 
JR NZ, next		2	0x20, 0x0C, 
LD A, 0xF0		2	0x3E, 0xF0, 
CP B			1	0xB8, 
JR NZ, jp4		2	0x20, 0x07, 
LD A, 0x0D		2	0x3E, 0x0D, 
OUT(0x00), A	2	0xD3, 0x00, 
CALL cmdline_pars	3	0xCD, 0x??, 0x??, 

jp4:
LD HL, $FE80	3	0x21, 0x80, 0xFE, 		//prevC = C(8)
LD (HL), C		1	0x71, 
POP BC			1	0xC1, 
EI				1	0xFB, 
RETI			2	0xED, 0x4D, 
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ CMD parser
----------------------------------------------------------------// hex_parse (input DE output A) (+0x003C)
PUSH BC		1	0xC5, 
PUSH HL		1	0xE5, 

LD BC, $0010	3	0x01, 0x10, 0x00, 	// parce high char(12)
LD HL, $805F	3	0x21, 0x5F, 0x80, 	// end of lower hex table
LD A, D			1	0x7A, 
CPDR			2	0xED, 0xB9, 
LD A, C			1	0x79, 
JR Z, 10		2	0x28, 0x0A, 

LD BC, $0010	3	0x01, 0x10, 0x00, 	// parce low char(15)
LD HL, $804F	3	0x21, 0x4F, 0x80, 	// end of upper hex table
LD A, D			1	0x7A, 
CPDR			2	0xED, 0xB9, 
LD A, C			1	0x79, 
LD HL, $FEFF	3	0x21, 0xFF, 0xFE, 
RLD				2	0xED, 0x6F, 

LD BC, $0010	3	0x01, 0x10, 0x00, 	// parce high char(12)
LD HL, $805F	3	0x21, 0x5F, 0x80, 	// end of lower hex table
LD A, E			1	0x7B, 
CPDR			2	0xED, 0xB9, 
LD A, C			1	0x79, 
JR Z, 10		2	0x28, 0x0A, 

LD BC, $0010	3	0x01, 0x10, 0x00, 	// parce low char(15)
LD HL, $804F	3	0x21, 0x4F, 0x80, 	// end of upper hex table
LD A, E			1	0x7B, 
CPDR			2	0xED, 0xB9, 
LD A, C			1	0x79, 
LD HL, $FEFF	3	0x21, 0xFF, 0xFE, 
RLD				2	0xED, 0x6F, 

LD A, (HL)	1	0x7E, 		// combine(4)
POP HL		1	0xE1, 
POP BC		1	0xC1, 
RET			1	0xC9, 
-----------------------------------------------------------------// hex_print (input A) (+0x002A)
PUSH BC		1	0xC5, 
PUSH HL		1	0xE5, 
LD C, A		1	0x4F, 

LD HL, $FEFF	3	0x21, 0xFF, 0xFE, 	// high nibble print(16)
LD (HL), C		1	0x71, 
XOR A			1	0xAF, 		// zeroing A
RLD				2	0xED, 0x6F, 	// high nibble to A
ADD 0x40		2	0xC6, 0x40, 	// upper hex table disp
LD L, A			1	0x6F, 
LD H, 0x80		2	0x26, 0x80, 
LD A, (HL)		1	0x7E, 
CALL tft_ch_fill	3	0xCD, 0x??, 0x??, 

LD HL, $FEFF	3	0x21, 0xFF, 0xFE, 
LD (HL), C		1	0x71, 		// low nibble print(20)
XOR A			1	0xAF, 		// zeroing A
RRD				2	0xED, 0x67, 	// low nibble to A
ADD 0x40		2	0xC6, 0x40, 	// upper hex table disp
LD L, A			1	0x6F, 
LD H, 0x80		2	0x26, 0x80, 
INC D			1	0x14, 
CALL tft_ch_cell_set	3	0xCD, 0x??, 0x??, 
LD A, (HL)		1	0x7E, 
CALL tft_ch_fill	3	0xCD, 0x??, 0x??, 

POP HL		1	0xE1, 
POP BC		1	0xC1, 
RET			1	0xC9, 
---------------------------------------------------------------// syntax error command(+0x001F)
PUSH BC			1	0xC5, 
PUSH HL			1	0xE5, 

LD A ($FE05)	3	0x3A, 0x05, 0xFE, 	// keyb buff pointer MSB(10)
LD H, A			1	0x67, 
LD L, 1			2	0x2E, 0x01, 	// keyb buff pointer LSB set
LD A ($FE04)	3	0x3A, 0x04, 0xFE, 
LD C, A			1	0x4F, 

LD E, 1				2	0x1E, 0x01, 	// set print start position(16)
LD D, 0				2	0x16, 0x00, 
CALL tft_ch_cell_set	3	0xCD, 0x??, 0x??, 
LD A, (HL)			1	0x7E, 
CALL tft_ch_fill	3	0xCD, 0x??, 0x??, 
INC L				1	0x2C, 
INC D				1	0x14, 
DEC C				1	0x0D, 
JR NZ, - 12			2	0x20, 0xF4, 

POP HL				1	0xE1, 
POP BC				1	0xC1, 
RET					1	0xC9, 
-------------------------------------------------------------// Cmdline_parser (+0x00XX)
PUSH BC			1	0xC5, 
PUSH HL			1	0xE5, 
LD A ($FE05)	3	0x3A, 0x05, 0xFE, 	// keyb buff pointer MSB (6)
LD H, A			1	0x67, 

LD L, 0			2	0x2E, 0x00, 	// keyb buff pointer LSB reset (26)
LD DE, $8070	3	0x11, 0x70, 0x80, 	// "clr" command ascii string
:next_ch
INC L			1	0x2C, 
LD A, (DE)		1	0x1A, 
CP (HL)			1	0xBE, 
JR NZ, 16		2	0x20, 0x10, 	// try next branch
INC E			1	0x1C, 
PUSH HL			1	0xE5, 
LD A, L			1	0x7D, 
LD HL, $FE04	3	0x21, 0x04, 0xFE, 
CP (HL)			1	0xBE, 
POP HL			1	0xE1, 
JR NZ, next_ch	2	0x20, 0xF1, 	// next char
CALL clr		3	0xCD, 0x??, 0x??, 	// "clr " command routine
POP HL			1	0xE1, 
POP BC			1	0xC1, 
RET				1	0xC9, 

LD L, 0			2	0x2E, 0x00, 	// keyb buff pointer LSB reset (21)
LD DE, $8073	3	0x11, 0x73, 0x80, 	// "dump " command ascii string
:next_ch
INC L			1	0x2C, 
LD A, (DE)		1	0x1A, 
CP (HL)			1	0xBE, 
JR NZ, 11		2	0x20, 0x0B, 	// try next branch
INC E			1	0x1C, 
CP 0x20			2	0xFE, 0x20, 	// check space
JR NZ, next_ch	2	0x20, 0xF6, 	// next char
CALL dump		3	0xCD, 0x??, 0x??,	// "dump " command routine
POP HL			1	0xE1, 
POP BC			1	0xC1, 
RET				1	0xC9, 

CALL synt err	3	0xCD, 0x??, 0x??, 
POP HL		1	0xE1, 
POP BC		1	0xC1, 
RET			1	0xC9, 
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ CMDS
-------------------------------------------------------------// >"clr" command(+0x007E)
0x16, 0x36, 0xCD, 0x0C, 0x93, 		// com (0x36) Memory access control(10)
0x16, 0x08, 0xCD, 0x18, 0x93, 		// MY=0; MX=0; MV=0; ML=0; BGR=1; MH=0

0x16, 0x2A, 0xCD, 0x0C, 0x93, 		//Column address set com(50)
0x16, 0x00, 0xCD, 0x18, 0x93, 		//start MSbyte
0x16, 0x00, 0xCD, 0x18, 0x93, 		//start LSbyte
0x16, 0x00, 0xCD, 0x18, 0x93, 		//stop MSbyte
0x16, 0x0E, 0xCD, 0x18, 0x93, 		//stop LSbyte
0x16, 0x2B, 0xCD, 0x0C, 0x93, 		//Page address set com
0x16, 0x00, 0xCD, 0x18, 0x93, 		//start MSbyte
0x16, 0x00, 0xCD, 0x18, 0x93, 		//start LSbyte
0x16, 0x01, 0xCD, 0x18, 0x93, 		//stop MSbyte
0x16, 0x3F, 0xCD, 0x18, 0x93, 		//stop LSbyte

0x16, 0x2C, 0xCD, 0x0C, 0x93, 		//Mem write com backcolor(55)
0xC5, 0x06, 0xFF, 0x0E, 0xE8, 		//PUSH BC/LD B,FF/LD C,E8 (255x232)
0x3A, 0x0E, 0xFE, 0x57, 0xCD, 0x18, 0x93, //rg
0x3A, 0x0F, 0xFE, 0x57, 0xCD, 0x18, 0x93, //gb
0x0D, 0x20, 0xF3, 0x05, 0x20, 0xEE, 	//DEC C/JR NZ,F3/DEC B/JR NZ,EE
0x06, 0x41, 0x0E, 0xE8, 				//LD B,41/LD C,E8 (65x232)
0x3A, 0x0E, 0xFE, 0x57, 0xCD, 0x18, 0x93, //rg
0x3A, 0x0F, 0xFE, 0x57, 0xCD, 0x18, 0x93, //gb
0x0D, 0x20, 0xF3, 0x05, 0x20, 0xEE, 0xC1, //DEC C/JR NZ,F3/DEC B/JR NZ,EE/POP BC

0x16, 0x36, 0xCD, 0x0C, 0x93, 		// com (0x36) Memory access control(10)
0x16, 0x28, 0xCD, 0x18, 0x93, 		// MY=0; MX=0; MV=1; ML=0; BGR=1; MH=0
0xC9, 
-------------------------------------------------------------// >"dump " command(+0x006B)
LD A ($FE05)		3	0x3A, 0x05, 0xFE, 	// keyb buff pointer MSB(6)
LD H, A			1	0x67, 
LD L, $0x05		2	0x2E, 0x05, 	// keyb buff pointer LSB set

INC L			1	0x2C, 		// high byte parse(8) *(BC <-- source address)
LD D, (HL)		1	0x56, 
INC L			1	0x2C, 
LD E, (HL)		1	0x5E, 
CALL hex_parse		3	0xCD, 0x??, 0x??, 
LD B, A			1	0x47, 

INC L			1	0x2C, 		// low byte parse(8)
LD D, (HL)		1	0x56, 
INC L			1	0x2C, 
LD E, (HL)		1	0x5E, 
CALL hex_parse		3	0xCD, 0x??, 0x??, 
LD C, A			1	0x4F, 

LD DE, 0, 0		3	0x11, 0x00, 0x00	// set print start position(3)

EXX			1	0xD9, 		// set dump matrix size(6)
LD B, 15		2	0x06, 0x0F, 	// set dump lines num
:line_end
DEC B			1	0x05, 
JR Z, end		2	0x28, 0x44, 

LD HL, $0084		3	0x21, 0x84, 0x00, 	//color  Y/W(12)
BIT 0, B		2	0xCB, 0x40, 
JR Z, 2			2	0x28, 0x02, 
SET 4, H		2	0xCB, 0xE4, 
LD ($FE08), HL		3	0x22, 0x08, 0xFE, 

LD C, 8			2	0x0E, 0x08, 	// set dump rows num(6)
EXX			1	0xD9, 
LD D, 0			2	0x16, 0x00, 
INC E			1	0x1C, 

CALL tft_ch_cell_set	3	0xCD, 0x30, 0x93, 	// addr print (25)
LD A, B			1	0x78, 		
CALL hex_print		3	0xCD, 0x??, 0x??, 
INC D			1	0x14, 
CALL tft_ch_cell_set	3	0xCD, 0x??, 0x??, 
LD A, C			1	0x79, 
CALL hex_print		3	0xCD, 0x??, 0x??, 
INC D			1	0x14, 
CALL tft_ch_cell_set	3	0xCD, 0x??, 0x??, 
LD A, 0x3A		2	0x3E, 0x3A, 
CALL tft_ch_fill	3	0xCD, 0x??, 0x??, 
INC D			1	0x14, 

:next_byte
CALL tft_ch_cell_set	3	0xCD, 0x??, 0x??, 	//(25)
LD A, 0x20		2	0x3E, 0x20, 
CALL tft_ch_fill	3	0xCD, 0x??, 0x??, 
INC D			1	0x14, 
CALL tft_ch_cell_set	3	0xCD, 0x??, 0x??, 
LD A, (BC)		1	0x0A, 
CALL hex_print		3	0xCD, 0x??, 0x??, 

INC BC			1	0x03, 
INC D			1	0x14, 
EXX			1	0xD9, 
DEC C			1	0x0D, 
JR Z, line_end		2	0x28, 0xBC, 
EXX			1	0xD9, 
JR, next_byte		2	0x18, 0xE7, 

:end
LD HL, $0080		3	0x21, 0x80, 0x00, 	//color R(8)
LD ($FE08), HL		3	0x22, 0x08, 0xFE, 
EXX			1	0xD9, 
RET			1	0xC9, 
---------------------------------------------------------------// >"send " command(+0x0045)
LD A ($FE05)		3	0x3A, 0x05, 0xFE, 	// keyb buff pointer MSB(6)
LD H, A			1	0x67, 
LD L, $0x05		2	0x2E, 0x05, 	// keyb buff pointer LSB set

INC L			1	0x2C, 		// high byte parse(16) *(BC <-- source address)
LD D, (HL)		1	0x56, 
INC L			1	0x2C, 
LD E, (HL)		1	0x5E, 
CALL hex_parse		3	0xCD, 0x??, 0x??, 
LD B, A			1	0x47, 
INC L			1	0x2C, 		// low byte parse
LD D, (HL)		1	0x56, 
INC L			1	0x2C, 
LD E, (HL)		1	0x5E, 
CALL hex_parse		3	0xCD, 0x??, 0x??, 
LD C, A			1	0x4F, 

PUSH BC			1	0xC5, 		// IX<--BC (3)
POP IX			1	0xDD, 0xE1, 

INC L			1	0x2C, 		// high byte parse(17)	 *(BC <-- bytes number)
INC L			1	0x2C, 
LD D, (HL)		1	0x56, 
INC L			1	0x2C, 
LD E, (HL)		1	0x5E, 
CALL hex_parse		3	0xCD, 0x??, 0x??, 
LD B, A			1	0x47, 		//LD B high byte
INC L			1	0x2C, 		// low byte parse
LD D, (HL)		1	0x56, 
INC L			1	0x2C, 
LD E, (HL)		1	0x5E, 
CALL hex_parse		3	0xCD, 0x??, 0x??, 
LD C, A			1	0x4F, 		//LD C low byte

PUSH IX		2	0xDD, 0xE5, 
POP HL		1	0xE1, 		//LD HL start addr(12+14)
LD D, C		1	0x51, 		//LD D low byte
XOR A		1	0xAF, 
CP D		1	0xBA, 
LD A, B		1	0x78, 		//LD A high byte
JR Z, 1		2	0x28, 0x01, 
INC A		1	0x3C, 
LD C, 0x00	2	0x0E, 0x00, 	//set output port
:next_page
CP 1		2	0xFE, 0x01, 
JR NZ, 3	2	0x20, 0x03, 
LD B, D		1	0x42, 
JR 2		2	0x18, 0x02, 
LD B, 0		2	0x06, 0x00, 
OTIR		2	0xED, 0xB3, 	//output B bytes from HL+
DEC A		1	0x3D, 
JR NZ, -14	2	0x20, 0xF2, 

RET		1	0xC9, 
---------------------------------------------------------------// >"load " command(+0x003B)
LD A ($FE05)	3	0x3A, 0x05, 0xFE, 	// keyb buff pointer MSB(6)
LD H, A		1	0x67, 
LD L, $0x05	2	0x2E, 0x05, 	// keyb buff pointer LSB set

INC L		1	0x2C, 		// high byte parse(16) *(BC <-- destination address)
LD D, (HL)		1	0x56, 
INC L		1	0x2C, 
LD E, (HL)		1	0x5E, 
CALL hex_parse	3	0xCD, 0x??, 0x??, 
LD B, A		1	0x47, 
INC L		1	0x2C, 		// low byte parse
LD D, (HL)		1	0x56, 
INC L		1	0x2C, 
LD E, (HL)		1	0x5E, 
CALL hex_parse	3	0xCD, 0x??, 0x??, 
LD C, A		1	0x4F, 

LD IX, $FE10	4	0xDD, 0x21, 0x10, 0xFE, 	//temp variable(8)
LD (IX+d), 0x09	4	0xDD, 0x36, 0x00, 0x09, 

:next_byte
INC L		1	0x2C, 		// byte parse(9)
INC L		1	0x2C, 
LD D, (HL)		1	0x56, 
INC L		1	0x2C, 
LD E, (HL)		1	0x5E, 
CALL hex_parse	3	0xCD, 0x??, 0x??, 
LD (BC), A		1	0x02, 

LD A, 3		2	0x3E, 0x03, 	//check code end(19)
ADD (IX+d)	3	0xDD, 0x86, 0x00, 
LD (IX+d), A	3	0xDD, 0x77, 0x00, 
PUSH HL		1	0xE5, 
LD HL, $FE04	3	0x21, 0x04, 0xFE, 
CP (HL)		1	0xBE, 
POP HL		1	0xE1, 
JR Z, 03		2	0x28, 0x03, 
INC C		1	0x0C, 
JR -28		2	0x18, 0xE4, 	//jump next_byte

RET		1	0xC9, 
--------------------------------------------------------------// >"move " command(+0x0047)
LD A ($FE05)	3	0x3A, 0x05, 0xFE, 	// keyb buff pointer MSB(6)
LD H, A		1	0x67, 
LD L, $0x05	2	0x2E, 0x05, 	// keyb buff pointer LSB set

INC L		1	0x2C, 		// high byte parse(16) *(BC <-- destination address)
LD D, (HL)		1	0x56, 
INC L		1	0x2C, 
LD E, (HL)		1	0x5E, 
CALL hex_parse	3	0xCD, 0x??, 0x??, 
LD B, A		1	0x47, 
INC L		1	0x2C, 		// low byte parse
LD D, (HL)		1	0x56, 
INC L		1	0x2C, 
LD E, (HL)		1	0x5E, 
CALL hex_parse	3	0xCD, 0x??, 0x??, 
LD C, A		1	0x4F, 

PUSH BC		1	0xC5, 		// IX<--BC (3)
POP IX		1	0xDD, 0xE1, 

INC L		1	0x2C, 		// high byte parse(17) *(BC <-- source address)
INC L		1	0x2C, 
LD D, (HL)		1	0x56, 
INC L		1	0x2C, 
LD E, (HL)		1	0x5E, 
CALL hex_parse	3	0xCD, 0x??, 0x??, 
LD B, A		1	0x47, 
INC L		1	0x2C, 		// low byte parse
LD D, (HL)		1	0x56, 
INC L		1	0x2C, 
LD E, (HL)		1	0x5E, 
CALL hex_parse	3	0xCD, 0x??, 0x??, 
LD C, A		1	0x4F, 

PUSH BC		1	0xC5, 		// IY<--BC (3)
POP IY		1	0xFD, 0xE1, 

INC L		1	0x2C, 		// high byte parse(17) *(BC <-- bytes number)
INC L		1	0x2C, 
LD D, (HL)		1	0x56, 
INC L		1	0x2C, 
LD E, (HL)		1	0x5E, 
CALL hex_parse	3	0xCD, 0x??, 0x??, 
LD B, A		1	0x47, 		//LD B high byte
INC L		1	0x2C, 		// low byte parse
LD D, (HL)		1	0x56, 
INC L		1	0x2C, 
LD E, (HL)		1	0x5E, 
CALL hex_parse	3	0xCD, 0x??, 0x??, 
LD C, A		1	0x4F, 		//LD C low byte

PUSH IX		2	0xDD, 0xE5, 	//(8)
POP DE		1	0xD1, 		//LD HL dest addr
PUSH IY		2	0xFD, 0xE5, 
POP HL		1	0xE1, 		//LD HL source addr
LDIR		2	0xED, 0xB0, 	//copy BC bytes block HL -> DE

RET		1	0xC9, 
---------------------------------------------------------------// >"jump " command(+0x001A)
LD A ($FE05)	3	0x3A, 0x05, 0xFE, 	// keyb buff pointer MSB(6)
LD H, A		1	0x67, 
LD L, $0x05	2	0x2E, 0x05, 	// keyb buff pointer LSB set

INC L		1	0x2C, 		// high address parse(8)
LD D, (HL)		1	0x56, 
INC L		1	0x2C, 
LD E, (HL)		1	0x5E, 
CALL hex_parse	3	0xCD, 0x??, 0x??, 
LD B, A		1	0x47, 

INC L		1	0x2C, 		// low address parse(8)
LD D, (HL)		1	0x56, 
INC L		1	0x2C, 
LD E, (HL)		1	0x5E, 
CALL hex_parse	3	0xCD, 0x??, 0x??, 
LD C, A		1	0x4F, 

PUSH BC		1	0xC5, 
POP HL		1	0xE1, 
JP (HL)		1	0xE9, 

RET		1	0xC9, 
-----------------------------------------------------------------// >"exe—Å " command(+0x0035)
LD A ($FE05)	3	0x3A, 0x05, 0xFE, 	// keyb buff pointer MSB(9)
LD H, A		1	0x67, 
LD L, $0x04	2	0x2E, 0x04, 	// keyb buff pointer LSB set
LD BC, $0100	3	0x01, 0x00, 0x01, 

LD IX, $FE10	4	0xDD, 0x21, 0x10, 0xFE, 	//temp variable(8)
LD (IX+d), 0x04	4	0xDD, 0x36, 0x00, 0x04, 

:next_byte
INC L		1	0x2C, 		// byte parse(9)
INC L		1	0x2C, 
LD D, (HL)		1	0x56, 
INC L		1	0x2C, 
LD E, (HL)		1	0x5E, 
CALL hex_parse	3	0xCD, 0x??, 0x??, 
LD (BC), A		1	0x02, 

LD A, 3		2	0x3E, 0x03, 	//check code end(19)
ADD (IX+d)	3	0xDD, 0x86, 0x00, 
LD (IX+d), A	3	0xDD, 0x77, 0x00, 
PUSH HL		1	0xE5, 
LD HL, $FE04	3	0x21, 0x04, 0xFE, 
CP (HL)		1	0xBE, 
POP HL		1	0xE1, 
JR Z, 03		2	0x28, 0x04, 
INC C		1	0x0C, 
JR -28		2	0x18, 0xE4, 

LD A, C9		2	0x3E, 0xC9, 	//add RET and execute (8)
INC C		1	0x0C, 
LD (BC), A		1	0x02, 
CALL $0100	3	0xCD, 0x00, 0x01, 
RET		1	0xC9, 
-----------------------------------------------------------------// >"sysl " command(+0x0046)
LD A ($FE05)	3	0x3A, 0x05, 0xFE, 	// keyb buff pointer MSB(6)
LD H, A		1	0x67, 
LD L, $0x05	2	0x2E, 0x05, 	// keyb buff pointer LSB set

INC L		1	0x2C, 		// nibble parse(11) *(Sys Reg low nibble)
LD D, (HL)		1	0x56, 
PUSH BC		1	0xC5, 
PUSH HL		1	0xE5, 
LD A, ($FE81)	3	0x3A, 0x81, 0xFE, 
LD HL, $FEFF	3	0x21, 0xFF, 0xFE, 
LD (HL), A		1	0x77, 

LD BC, $0010	3	0x01, 0x10, 0x00, 	// parce high char(12)
LD HL, $805F 	3	0x21, 0x5F, 0x80, 	// end of lower hex table
LD A, D		1	0x7A, 
CPDR		2	0xED, 0xB9, 
LD A, C		1	0x79, 
JR Z, 10		2	0x28, 0x0A, 

LD BC, $0010	3	0x01, 0x10, 0x00, 	// parce high char(24)
LD HL, $804F	3	0x21, 0x4F, 0x80, 	// end of upper hex table
LD A, D		1	0x7A, 
CPDR		2	0xED, 0xB9, 
LD A, C		1	0x79, 

LD HL, $FEFF	3	0x21, 0xFF, 0xFE, 
RRD		2	0xED, 0x67, 
LD A, (HL)		1	0x7E, 
RRD		2	0xED, 0x67, 
LD A, (HL)		1	0x7E, 
LD ($FE81), A	3	0x32, 0x81, 0xFE, 
POP HL		1	0xE1, 
POP BC		1	0xC1, 

PUSH DE		1	0xD5, 
LD DE, 0x0E, 0x23	3	0x11, 0x0E, 0x23, 
CALL TFT_ch_cell	3	0xCD, 0x??, 0x??, 

LD A, ($FE81)	3	0x3A, 0x81, 0xFE, 	//output A to sys reg(18)
OUT (F0h), A	2	0xD3, 0xF0, 
CALL hex_print	3	0xCD, 0x??, 0x??, 
POP DE		1	0xD1, 
RET		1	0xC9, 
-----------------------------------------------------------------// >"sysh " command(+0x0048)
LD A ($FE05)	3	0x3A, 0x05, 0xFE, 	// keyb buff pointer MSB(6)
LD H, A		1	0x67, 
LD L, $0x05	2	0x2E, 0x05, 	// keyb buff pointer LSB set

INC L		1	0x2C, 		// nibble parse(11) *(Sys Reg low nibble)
LD D, (HL)		1	0x56, 
PUSH BC		1	0xC5, 
PUSH HL		1	0xE5, 
LD A, ($FE81)	3	0x3A, 0x81, 0xFE, 
LD HL, $FEFF	3	0x21, 0xFF, 0xFE, 
LD (HL), A		1	0x77, 

LD BC, $0010	3	0x01, 0x10, 0x00, 	// parce high char(12)
LD HL, $805F	3	0x21, 0x5F, 0x80, 	// end of lower hex table
LD A, D		1	0x7A, 
CPDR		2	0xED, 0xB9, 
LD A, C		1	0x79, 
JR Z, 10		2	0x28, 0x0A, 

LD BC, $0010	3	0x01, 0x10, 0x00, 	// parce high char(26)
LD HL, $804F	3	0x21, 0x4F, 0x80, 	// end of upper hex table
LD A, D		1	0x7A, 
CPDR		2	0xED, 0xB9, 
LD A, C		1	0x79, 

LD HL, $FEFF	3	0x21, 0xFF, 0xFE, 
RLD		2	0xED, 0x6F, 
LD A, ($FE81)	1	0x3A, 0x81, 0xFE, 
RLD		2	0xED, 0x6F, 
LD A, (HL)		1	0x7E, 
LD ($FE81), A	3	0x32, 0x81, 0xFE, 
POP HL		1	0xE1, 
POP BC		1	0xC1, 

PUSH DE		1	0xD5, 
LD DE, 0x0E, 0x23	3	0x11, 0x0E, 0x23,
CALL TFT_ch_cell	3	0xCD, 0x??, 0x??, 

LD A, ($FE81)	3	0x3A, 0x81, 0xFE, 	//output A to sys reg(6)
OUT (F0h), A	2	0xD3, 0xF0, 
CALL hex_print	3	0xCD, 0x??, 0x??, 
POP DE		1	0xD1, 
RET		1	0xC9, 
-----------------------------------------------------------------// >"out " command(+0x0019)
LD A ($FE05)	3	0x3A, 0x05, 0xFE, 	// keyb buff pointer MSB(6)
LD H, A		1	0x67, 
LD L, $0x04	2	0x2E, 0x04, 	// keyb buff pointer LSB set

INC L		1	0x2C, 		// byte parse(8) *(Sys Reg value)
LD D, (HL)		1	0x56, 
INC L		1	0x2C, 
LD E, (HL)		1	0x5E, 
CALL hex_parse	3	0xCD, 0x??, 0x??, 
LD C, A		1	0x4F, 

INC L		1	0x2C, 		// byte parse(8) *(Sys Reg value)
INC L		1	0x2C, 
LD D, (HL)		1	0x56, 
INC L		1	0x2C, 
LD E, (HL)		1	0x5E, 
CALL hex_parse	3	0xCD, 0x??, 0x??, 

OUT (C), A	2	0xED, 0x79, 	//output A to port C(3)
RET		1	0xC9, 
----------------------------------------------------------------// >"inp " command(+0x001A)
LD A ($FE05)	3	0x3A, 0x05, 0xFE, 	// keyb buff pointer MSB(6)
LD H, A		1	0x67, 
LD L, $0x04	2	0x2E, 0x04, 	// keyb buff pointer LSB set

INC L		1	0x2C, 		// byte parse(8) *(Sys Reg value)
LD D, (HL)	1	0x56, 
INC L		1	0x2C, 
LD E, (HL)	1	0x5E, 
CALL hex_parse	3	0xCD, 0x??, 0x??, 
LD C, A		1	0x4F, 

LD DE, 0x01, 0x00	3	0x11, 0x01, 0x00, 	//set pos.(12)
CALL TFT_ch_cell	3	0xCD, 0x??, 0x??, 
IN A, (C)		2	0xED, 0x78, 		//read port(C)
CALL hex_print		3	0xCD, 0x??, 0x??, 	//print
RET			1	0xC9, 
-------------------------------------------------------------------// >"crc7 " command(+0x0030+0x0B)
LD A ($FE05)	3	0x3A, 0x05, 0xFE, 		// keyb buff pointer MSB(9)
LD H, A		1	0x67, 
LD L, $0x04	2	0x2E, 0x04, 		// keyb buff pointer LSB set
LD BC, $0100	3	0x01, 0x00, 0x01, 		// message pointer

LD IX, $FEFE	4	0xDD, 0x21, 0xFE, 0xFE, 	//temp variable(7)
LD (IX+d), L	3	0xDD, 0x75, 0x00, 

:next_byte
INC L		1	0x2C, 		//byte parse(9)
INC L		1	0x2C, 
LD D, (HL)		1	0x56, 
INC L		1	0x2C, 
LD E, (HL)		1	0x5E, 
CALL hex_parse	3	0xCD, 0x??, 0x??, 
LD (BC), A		1	0x02, 

LD A, 3		2	0x3E, 0x03, 	//check code end(19)
ADD (IX+d)	3	0xDD, 0x86, 0x00, 
LD (IX+d), A	3	0xDD, 0x77, 0x00, 
PUSH HL		1	0xE5, 
LD HL, $FE04	3	0x21, 0x04, 0xFE, 	//key buff
CP (HL)		1	0xBE, 
POP HL		1	0xE1, 
JR Z, 03		2	0x28, 0x03, 
INC C		1	0x0C, 
JR -28		2	0x18, 0xE4, 

CALL crc7_add	3	0xCD, 0x??, 0x??, 

RET		1	0xC9, 

-----------------------------------------------------------------//>"sdi " command [L bytes at $0100] (+0x0038)
LD IX, $FEFE	4	0xDD, 0x21, 0xFE, 0xFE, 	//temp variable(10)
LD A ($FE05)	3	0x3A, 0x05, 0xFE, 		// keyb buff pointer MSB
LD H, A		1	0x67, 
LD L, $0x03	2	0x2E, 0x03, 		// keyb buff pointer LSB set
:next_byte
INC L		1	0x2C, 		//byte parse(11)
INC L		1	0x2C, 
LD D, (HL)		1	0x56, 
INC L		1	0x2C, 
LD E, (HL)		1	0x5E, 
CALL hex_parse	3	0xCD, 0x??, 0x??, 
LD (IX+d), A	3	0xDD, 0x77, 0x00, 

LD C, L		1	0x4D, 		//(17)
LD HL, $0100	3	0x21, 0x00, 0x01, 	//UART buff
LD A, 00h		2	0x3E, 0x00, 	//SCK# DI# SS#
OUT (00h), A	2	0xD3, 0x00, 	//dataA <-- A
:
CALL, sd_wr_byte	3	0xCD, 0x??, 0x??, 
INC HL		1	0x23, 
DEC BC		1	0x0B, 
JR Z, 2		2	0x28, 0x02, 
JR, -9		2	0x18, 0xF7, 

LD C, (IX+d)	3	0xDD, 0x4E, 0x00, 	//(13)
LD HL, $FC00	3	0x21, 0x00, 0xFC, 	//temp buff
:
CALL, sd_rd_byte	3	0xCD, 0x??, 0x??, 
INC HL		1	0x23, 
DEC C		1	0x0D, 
JR NZ, -7		2	0x20, 0xF9, 

LD A, 01h		2	0x3E, 0x01, 	//SCK# DI# SS(5)
OUT (00h), A	2	0xD3, 0x00, 	//dataA <-- A
RET		1	0xC9, 
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SD routines
--------------------------------------------------------------//crc7_add (input BC last byte pointer)(+0x003D)
PUSH BC		1	0xC5, 	//CRC7 block load $FC00(14)
POP HL		1	0xE1, 
repeat:
LD A, (HL)		1	0x7E, 
LD H, $FC		2	0x26, 0xFC, 
LD (HL), A		1	0x77, 
XOR A		1	0xAF, 
CP L		1	0xBD, 
JR Z, 4		2	0x28, 0x04, 
DEC L		1	0x2D, 
LD H, B		1	0x60, 
JR repeat		2	0x18, 0xF4, 

LD E, C		1	0x59, 		//bit number calc(8)
INC E		1	0x1C, 
SLA E		2	0xCB, 0x23, 
SLA E		2	0xCB, 0x23, 
SLA E		2	0xCB, 0x23, 

shift:
XOR A		1	0xAF, 		//CRC7 block LSB(5)
LD L, C		1	0x69, 
INC L		1	0x2C, 
SCF		1	0x37, 		//set carry
CCF		1	0x3F, 		//invert carry
repeat:
DEC L		1	0x2D, 		//byte shift(.16)
JR Z, 4		2	0x28, 0x04, 
RL (HL)		2	0xCB, 0x16, 
JR repeat		2	0x18, 0xF9, 
RL (HL)		2	0xCB, 0x16, 
JR C, one		2	0x38, 0x05, 
DEC E		1	0x1D, 
JR Z, end		2	0x28, 0x0C, 
JR shift		2	0x18, 0xEB, 

one:
LD A, 0x12	2	0x3E, 0x12, 	//CRC7 invert(10)
XOR (HL)		1	0xAE, 
LD (HL), A		1	0x77, 
XOR A		1	0xAF, 
DEC E		1	0x1D, 
JR Z, end		2	0x28, 0x02, 
JR shift		2	0x18, 0xE1, 

end:
SET 0, (HL)	2	0xCB, 0xC6, 	//add CRC7 byte(7)
LD A, (HL)		1	0x7E, 
PUSH BC		1	0xC5, 
POP HL		1	0xE1, 
INC L		1	0x2C, 
LD (HL), A		1	0x77, 

RET		1	0xC9, 

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SETUP
----------------------------------------------------------------// stackpointer allocation
LD SP, FF, FF	3	0x31, 0xFF, 0xFF, 
---------------------------------------------------------------// interrupt table allocation
LD A, 7F		2	0x3E, 0x81, 
LD I, A		2	0xED, 0x47, 
//---------------------------------------------------- 2BYTE values & pointers
0x21, 0x00, 0x82, //font table pointer
0x22, 0x00, 0xFE, //$FE00
0x21, 0x00, 0x92, //keyb scan table pointer
0x22, 0x02, 0xFE, //$FE02
0x21, 0x00, 0xFD, //keyb buff pointer
0x22, 0x04, 0xFE, //$FE04
0x21, 0x00, 0x01, //UART buff pointer
0x22, 0x06, 0xFE, //$FE06
0x21, 0x80, 0x00, //font color (R=8000, Y=8400, W=8410)
0x22, 0x08, 0xFE, //$FE08
0x21, 0x00, 0x00, //background color
0x22, 0x0A, 0xFE, //$FE0A
0x21, 0x00, 0x00, //TFT char position row/col
0x22, 0x0C, 0xFE, //$FE0C
//---------------------------------------------------- 1BYTE values
0x21, 0x80, 0xFE, //$FE80 <- 0 :prev keyb char
0x36, 0x00, 
0x21, 0x81, 0xFE, //$FE81 <- 0xFF :SYSR state
0x36, 0xFF, 
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ IO CONFIG
-------------------------------------------------------------------// PIO ports config (TFT+SD)
LD A, 03h			0x3E, 0x03, //portA Interrupt Disable Word (disabled)
OUT (12h), A		0xD3, 0x12, 
LD A, CFh			0x3E, 0xCF, //portA Mode Control Word (Mode 3)
OUT (12h), A		0xD3, 0x12,
LD A, 00h			0x3E, 0x00, //portA IO Register Control Word (all output)
OUT (12h), A		0xD3, 0x12, 
LD A, 03h			0x3E, 0x03, //portB Interrupt Disable Word (disabled)
OUT (13h), A		0xD3, 0x13, 
LD A, CFh			0x3E, 0xCF, //portB Mode Control Word (Mode 3)
OUT (13h), A		0xD3, 0x13, 
LD A, 04h			0x3E, 0x04, //portB IO Register Control Word (B2 input)
OUT (13h), A		0xD3, 0x13, 
---------------------------------------------------------------------// PIO ports config (GPIO A3A2 = 00)
LD A, 03h			0x3E, 0x03, //portA Interrupt Disable Word (disabled)
OUT (22h), A		0xD3, 0x22, 
LD A, CFh			0x3E, 0xCF, //portA Mode Control Word (Mode 3)
OUT (22h), A		0xD3, 0x22,
LD A, 00h			0x3E, 0x00, //portA IO Register Control Word (all output)
OUT (22h), A		0xD3, 0x22, 
LD A, 03h			0x3E, 0x03, //portB Interrupt Disable Word (disabled)
OUT (23h), A		0xD3, 0x23, 
LD A, CFh			0x3E, 0xCF, //portB Mode Control Word (Mode 3)
OUT (23h), A		0xD3, 0x23, 
LD A, 00h			0x3E, 0x00, //portB IO Register Control Word (all output)
OUT (23h), A		0xD3, 0x23, 
------------------------------------------------------------------------// SIO ports config
LD A, 18h			0x3E, 0x18, //WR0 SIO reset
OUT (02h), A		0xD3, 0x02, 
LD A, 14h			0x3E, 0x14, //WR4 reset ext/status int
OUT (02h), A		0xD3, 0x02, 
LD A, C4h			0x3E, 0x05, //x1 clock/1 stop bit/parity odd
OUT (02h), A		0xD3, 0x02, 
LD A, 03h			0x3E, 0x03, //WR3
OUT (02h), A		0xD3, 0x02, 
LD A, C0h			0x3E, 0xC1, //8bit/Rx enable
OUT (02h), A		0xD3, 0x02, 
LD A, 05h			0x3E, 0x05, //WR5
OUT (02h), A		0xD3, 0x02, 
LD A, 60h			0x3E, 0x60, //8 bit/Tx disable
OUT (02h), A		0xD3, 0x02, 
LD A, 11h			0x3E, 0x11, //WR1 reset ext/status int
OUT (02h), A		0xD3, 0x02, 
LD A, 1Ch			0x3E, 0x1C, //Rx int all char no parity/status not affects
OUT (02h), A		0xD3, 0x02, 

LD A, 18h			0x3E, 0x18, //WR0 SIO reset
OUT (03h), A		0xD3, 0x03, 
LD A, 02h			0x3E, 0x02, //WR2 (port B)
OUT (03h), A		0xD3, 0x03, 
LD A, 00h			0x3E, 0x00, //interrupt vector 00
OUT (03h), A		0xD3, 0x03, 
LD A, 14h			0x3E, 0x14, //WR4 reset ext/status int
OUT (03h), A		0xD3, 0x03, 
LD A, C4h			0x3E, 0xC4, //x64 clock/1stop bit
OUT (03h), A		0xD3, 0x03, 
LD A, 03h			0x3E, 0x03, //WR3
OUT (03h), A		0xD3, 0x03, 
LD A, C1h			0x3E, 0xC1, //8bit/Rx enable
OUT (03h), A		0xD3, 0x03, 
LD A, 05h			0x3E, 0x05, //WR5
OUT (03h), A		0xD3, 0x03, 
LD A, 68h			0x3E, 0x68, //8 bit/Tx enable
OUT (03h), A		0xD3, 0x03, 
LD A, 11h			0x3E, 0x11, //WR1 reset ext/status int
OUT (03h), A		0xD3, 0x03, 
LD A, 1Ch			0x3E, 0x9C, //Wait ON/Rx int all char no parity/status affects
OUT (03h), A		0xD3, 0x03, 
----------------------------------------------------------------------------// TFT ILI9341 init
0x16, 0xC0, 0xCD, 0x0C, 0x93, // com (0xC0) Power control
0x16, 0x17, 0xCD, 0x18, 0x93, // GVDD < (Vcc-0.5V)
0x16, 0xC1, 0xCD, 0x0C, 0x93, // com (0xC1) Power control
0x16, 0x10, 0xCD, 0x18, 0x93, // default
0x16, 0xC5, 0xCD, 0x0C, 0x93, // com (0xC5) VCM control
0x16, 0x31, 0xCD, 0x18, 0x93, // VCOMH = 3.925V (Contrast)
0x16, 0x3C, 0xCD, 0x18, 0x93, // VCOML = -1.0V
0x16, 0xC7, 0xCD, 0x0C, 0x93, // com (0xC7) VCM control2
0x16, 0x86, 0xCD, 0x18, 0x93, // nVM = 1; VMF = -58
0x16, 0xB1, 0xCD, 0x0C, 0x93, // com (0xB1) Frame Rate Control
0x16, 0x00, 0xCD, 0x18, 0x93, // fosc
0x16, 0x18, 0xCD, 0x18, 0x93, // 24 clk/line

0x16, 0x36, 0xCD, 0x0C, 0x93, // com (0x36) Memory access control
0x16, 0x28, 0xCD, 0x18, 0x93, // MY=0; MX=0; MV=1; ML=0; BGR=1; MH=0
0x16, 0xB6, 0xCD, 0x0C, 0x93, // com (0xB6) Display function control
0x16, 0x08, 0xCD, 0x18, 0x93, // PTG = interval scan; PT = +V63 - V0
0x16, 0x82, 0xCD, 0x18, 0x93, // REV = white; GS = 1->320; SS = 1->720; SM = 0;
0x16, 0x27, 0xCD, 0x18, 0x93, // NL = 320 lines
0x16, 0x3A, 0xCD, 0x0C, 0x93, // com (0x3A) Pixel format set
0x16, 0x55, 0xCD, 0x18, 0x93, // DPI 16bit; DBI 16bit
0x16, 0x39, 0xCD, 0x0C, 0x93, // com (0x39) Idle mode ON (0x38 OFF) (Idle mode means simplified color scheme)
0x16, 0x11, 0xCD, 0x0C, 0x93, // com (0x11) Exit sleep

0xC5, 0x06, 0x64, 0xCD, 0x03, 0x93, 	// pause 100ms
0x16, 0x29, 0xCD, 0x0C, 0x93, 		// com (0x29) Display on
0x16, 0x2C, 0xCD, 0x0C, 0x93, 		// com (0x2C)

0x16, 0x36, 0xCD, 0x0C, 0x93, // com (0x36) Memory access control
0x16, 0x08, 0xCD, 0x18, 0x93, // MY=0; MX=0; MV=0; ML=0; BGR=1; MH=0
------------------------------------------------------------------------// TFT fill background
0x16, 0x2C, 0xCD, 0x0C, 0x93, 			//Mem write com backcolor
0xC5, 0x06, 0xFF, 0x0E, 0xF0, 			//PUSH BC/LD B,FF/LD C,F0 255x240
0x3A, 0x0E, 0xFE, 0x57, 0xCD, 0x18, 0x93, 	//data byte rg
0x3A, 0x0F, 0xFE, 0x57, 0xCD, 0x18, 0x93, 	//data byte gb
0x0D, 0x20, 0xF3, 0x05, 0x20, 0xEE, 		//DEC C/JR NZ,F3/DEC B/JR NZ,EE
0x06, 0x41, 0x0E, 0xF0, 			//LD B,41/LD C,F0
0x3A, 0x0E, 0xFE, 0x57, 0xCD, 0x18, 0x93, 	//data byte rg
0x3A, 0x0F, 0xFE, 0x57, 0xCD, 0x18, 0x93, 	//data byte gb
0x0D, 0x20, 0xF3, 0x05, 0x20, 0xEE, 0xC1, 	//DEC C/JR NZ,F3/DEC B/JR NZ,EE/POP BC

0x16, 0x36, 0xCD, 0x0C, 0x93, 			// com (0x36) Memory access control
0x16, 0x28, 0xCD, 0x18, 0x93, 			// MY=0; MX=0; MV=1; ML=0; BGR=1; MH=0
--------------------------------------------------------------------------// TFT intro
0xED, 0x5B, 0x0C, 0xFE, 	//LD DE, ($FE0C)
0xCD, 0x??, 0x??, 		// call TFT_char_cell_set
0x3E, 0x41, 0xCD, 0x??, 0x??, 	// call TFT_char_fill 0x41
0x14, 				//INC D
0xCD, 0x30, 0x93, 		// call TFT_char_cell_set
0x3E, 0x3E, 0xCD, 0x??, 0x??, 	// call TFT_char_fill 0x3E
0x14, 				//INC D
0xED, 0x53, 0x0C, 0xFE, 	//LD ($FE0C), D
-------------------------------------------------------------------------// IO check
LD DE, 0x0D, 0x25		0x11, 0x0D, 0x25, 
CALL TFT_ch_cell		0xCD, 0x??, 0x??, 
LD A, 01h			0x3E, 0x00, 		//RR0 (GPIO port A)
IN A, (23h)			0xDB, 0x23, 
CP, 0xFF			0xFE, 0x00, 
JR NZ, 0x09			0x20, 0x09, 
LD A, 47h			2	0x3E, 0x47, 
CALL TFT_char_fill	3	0xCD, 0x??, 0x??, 	//print "G"
LD A, 0x47			2	0x3E, 0x47, 		
OUT (00h), A		2	0xD3, 0x00, 		//send "G"

LD DE, 0x0D, 0x26		0x11, 0x0D, 0x26, 
CALL TFT_ch_cell		0xCD, 0x??, 0x??, 
LD A, 01h			0x3E, 0x00, 		//RR0 (PIO port A)
IN A, (13h)			0xDB, 0x13, 
CP, 0xFF			0xFE, 0xFF, 
JR NZ, 0x09			0x20, 0x09, 
LD A, 50h			2	0x3E, 0x50, 
CALL TFT_char_fill	3	0xCD, 0x??, 0x??, 	//print "P"
LD A, 0x50			2	0x3E, 0x50, 		
OUT (00h), A		2	0xD3, 0x00, 		//send "P"

LD DE, 0x0D, 0x27		0x11, 0x0D, 0x27, 
CALL TFT_ch_cell		0xCD, 0x??, 0x??, 
LD A, 01h			0x3E, 0x01, 		//WR1 (SIO port A)
OUT (02h), A			0xD3, 0x02, 
IN A, (02h)			0xDB, 0x02, 
CP, 0x07			0xFE, 0x07, 
JR NZ, 0x09			0x20, 0x09, 
LD A, 53h		2	0x3E, 0x53, 
CALL TFT_char_fill	3	0xCD, 0x??, 0x??, 	//print "S"
LD A, 0x53		2	0x3E, 0x53, 		
OUT (00h), A	2	0xD3, 0x00, 		//send "S"

LD A, 0x0D		2	0x3E, 0x0D, 
OUT (00h), A	2	0xD3, 0x00, 		//send ret
---------------------------------------------------------// banks ID
LD A, 0xF0		2	0x3E, 0xF0, 
LD B, 0xFF		2	0x06, 0xFF, 
:next bank
OUT (F0h), A	2	0xD3, 0xF0, 		//sys reg <- A
PUSH BC			1	0xC5, 
LD HL, 0x00, 0x80	3	0x21, 0x00, 0x80, 	//HL <-  0x0000
LD DE, 0x00, 0x00	3	0x11, 0x00, 0x00, 	//DE  <-  0x8000
LD BC, 0x70, 0x00	3	0x01, 0x70, 0x00, 	//BC  <-  0x0070
LDIR			2	0xED, 0xB0, 		//copy 0x0070 bytes block 0x8000 -> 0x0000
POP BC			1	0xC1, 
LD ($0007), A	3	0x32, 0x07, 0x00, 
INC A			1	0x3C, 
CP B			1	0xB8, 
JR NZ, -22		2	0X20, 0xEA, 		//jump next bank
---------------------------------------------------------// banks ID check
LD C, 0xF0	2	0x0E, 0xF0, 
LD B, 0xFE	2	0x06, 0xFE, 

:next bank
LD A, 0xEF	2	0x3E, 0xEF, 
CP B		1	0xB8, 
JR Z, 11	2	0X28, 0x0B, 	//jump banks print

OUT (C), B		2	0xED, 0x41, 	//sys reg <- A
LD A, ($0007)	3	0x3A, 0x07, 0x00, 
CP B			1	0xB8, 
JR NZ, 3		2	0X20, 0x03, 	//jump banks print
DEC B			1	0x05, 
JR -16			2	0X18, 0xF0, 	//jump next bank

:banks print
LD DE, 0x0E, 0x26	3	0x11, 0x0E, 0x26, 
CALL TFT_ch_cell	3	0xCD, 0x??, 0x??, 
LD A, 0xFF		2	0x3E, 0xFF, 
SUB B			1	0x90, 	
CALL hex_print		3	0xCD, 0x??, 0x??, 

LD D, 0x25		2	0x16, 0x25, 
CALL TFT_ch_cell	3	0xCD, 0x??, 0x??, 
LD A, 0x2F		2	0x3E, 0x2F, 		//"ascii /"
CALL TFT_char_fill	3	0xCD, 0x??, 0x??, 
--------------------------------------------------// bank E init
LD A, ($FE81)		3	0x3A, 0x81, 0xFE, 
LD HL, $FEFF		3	0x21, 0xFF, 0xFE, 
LD (HL), A		1	0x77, 
LD A, 0xFE		2	0x3E, 0xFE, 
RRD			2	0xED, 0x67, 
LD A, (HL)		1	0x7E, 
RRD			2	0xED, 0x67, 
LD A, (HL)		1	0x7E, 
LD ($FE81), A		3	0x32, 0x81, 0xFE, 	//SYSREG state low nibble write

LD DE, 0x0E, 0x23	3	0x11, 0x0E, 0x23,
CALL TFT_ch_cell	3	0xCD, 0x??, 0x??, 
LD A, ($FE81)		3	0x3A, 0x81, 0xFE, 
OUT (F0h), A		2	0xD3, 0xF0, 		//SYSREG <- state (switch to bank E)
CALL hex_print		3	0xCD, 0x??, 0x??, 
--------------------------------------------------------// interrupt setup
INT 2			2	0xED, 0x5E, 	//int mode 2 
EI			1	0xFB, 		//EI

0x3E, 0x4F, 0xD3, 0x00, 	//UART <- "O"
0x3E, 0x4B, 0xD3, 0x00, 	//UART <- "K"
0x3E, 0x0D, 0xD3, 0x00, 	//UART <- "cr"

0x76, 0x18, 0xFD, 		// halt, jump halt
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PRIMER CODE
LD HL, 0x00, 0x00	3	0x21, 0x00, 0x00, 	//HL <-  0x0000
LD DE, 0x00, 0x80	3	0x11, 0x00, 0x80, 	//DE  <-  0x8000
LD BC, 0x00, 0x30	3	0x01, 0x00, 0x30, 	//BC  <-  0x3000
LDIR				2	0xED, 0xB0, 	//copy 0x3000 bytes block 0x0000 -> 0x8000
LD HL, 0x00, 0x00	3	0x21, 0x20, 0x7F, 	//HL <-  0x7F20
LD DE, 0x00, 0x80	3	0x11, 0x00, 0xFC, 	//DE  <-  0xFC00
LD BC, 0x00, 0x30	3	0x01, 0xE0, 0x00, 	//BC  <-  0x00E0
LDIR				2	0xED, 0xB0, 	//copy 0x00E0 bytes block 0x7F20 -> 0xFC00
LD HL, 0x00, 0xA0	3	0x21, 0x00, 0xA0, 	//HL <-  new setup address
LD $8002, HL		3	0x22, 0x02, 0x80, 	//$8002  <-  HL
JP $8000			3	0xC3, 0x00, 0x80, 	//jump $8000

=================================================================// END